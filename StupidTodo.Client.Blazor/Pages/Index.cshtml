@using StupidTodo.Domain
@page "/"
@inject HttpClient Http

<div class="row">
    <h1>Stupid Todo Blazor</h1>
</div>

@if (Busy)
{
    <i class="fa fa-gear fa-spin" style="position: absolute; top:30%; left:45%; font-size:100px"></i>
}
else
{
    <div class="row">
        <div class="col-9 col-md-6 alert alert-secondary" role="alert">
            <button onclick="@(async () => await CreateTodoAsync())" class="btn btn-sm btn-success"><i class="fa fa-plus"></i></button>
            &nbsp;&nbsp;&nbsp;
            <input type="text" bind="@NewTodoDescription" />
        </div>
        <div class="col-3">
            <button onclick="@(async () => await GetDoneAsync())" class="btn btn-sm btn-secondary">@ShowDoneText</button>
        </div>
    </div>
    <hr />
    @foreach (var todo in Todos.Where(t => !t.Done))
    {
        <div class="row">
            <div class="col-12 alert alert-primary" role="alert">
                @if (todo.IsEditing)
                {
                    <button onclick="@(() => CancelEdit(todo))" class="btn btn-sm btn-secondary"><i class="fa fa-undo"></i></button>
                    <button onclick="@(async () => await SaveTodoAsync(todo))" class="btn btn-sm btn-success"><i class="fa fa-floppy-o"></i></button>
                    <input type="text" bind="@todo.DescriptionEdit" />
                }
                else
                {
                    <button onclick="@(async () => await ToggleDoneAsync(todo))" class="btn btn-sm btn-primary"><i class="fa fa-check"></i></button>
                    <a onclick="@(() => EditTodo(todo))" href="javascript:void(0)">@todo.Description</a>
                }
            </div>
        </div>
    }
    @if (ShowingDone)
    {
        <hr />
        @foreach (var todo in Todos.Where(t => t.Done))
        {
            <div class="col-12 alert alert-secondary" role="alert">
                <button onclick="@(async () => await ToggleDoneAsync(todo))" class="btn btn-sm btn-secondary"><i class="fa fa-check"></i></button>
                &nbsp;&nbsp;&nbsp;
                @todo.Description
                <button onclick="@(async () => await DeleteTodoAsync(todo))" class="btn btn-sm btn-danger pull-right"><i class="fa fa-times"></i></button>
            </div>
        }
    }
}

@functions {
private bool Busy;
private string NewTodoDescription;
private string ShowDoneText;
private bool ShowingDone;
private StatefulTodo[] Todos;

private void CancelEdit(StatefulTodo todo)
{
    todo.DescriptionEdit = todo.Description;
    todo.IsEditing = false;
}

private async Task CreateTodoAsync()
{
    if (String.IsNullOrWhiteSpace(NewTodoDescription)) { return; }

    Busy = true;
    var todo = await Http.PostJsonAsync<Todo>("api/todo", new Todo(NewTodoDescription));
    if (todo != null) { Todos = Todos.Concat(new StatefulTodo[] { new StatefulTodo(todo) }).ToArray(); }
    NewTodoDescription = String.Empty;
    Busy = false;
}

private async Task DeleteTodoAsync(StatefulTodo todo)
{
    var result = await Http.DeleteAsync($"api/todo/{todo.Id}");
    if (result != null && result.IsSuccessStatusCode)
    {
        Todos = Todos.Where(t => t.Id != todo.Id).ToArray();
    }
}

private void EditTodo(StatefulTodo todo)
{
    todo.IsEditing = true;
}

private async Task GetDoneAsync()
{
    Busy = true;
    ShowingDone = !ShowingDone;
    if (!ShowingDone)
    {
        ShowDoneText = "Show Done";
        Todos = Todos.Where(t => !t.Done).ToArray();
    }
    else
    {
        ShowDoneText = "Hide Done";
        var dones = await Http.GetJsonAsync<Todo[]>("api/todo/done");
        dones = dones ?? new Todo[0];
        Todos = Todos.Where(t => !t.Done)
                        .Concat(dones)
                        .Select(t => new StatefulTodo(t))
                        .ToArray();
    }
    Busy = false;
}

protected override async Task OnInitAsync()
{
    Busy = true;
    NewTodoDescription = String.Empty;
    ShowDoneText = "Show Done";
    ShowingDone = false;
    var todos = await Http.GetJsonAsync<Todo[]>("api/todo") ?? new Todo[0];
    Todos = todos.Select(t => new StatefulTodo(t)).ToArray();
    Busy = false;
}

private async Task<bool> SaveTodoAsync(StatefulTodo todo)
{
    if (String.IsNullOrWhiteSpace(todo.DescriptionEdit)) { return false; }

    Busy = true;
    string description = todo.Description;
    todo.Description = todo.DescriptionEdit;
    var resultTodo = await Http.PutJsonAsync<Todo>($"api/todo/{todo.Id}", todo);
    if (resultTodo != null)
    {
        todo.Description = resultTodo.Description;
        todo.DescriptionEdit = resultTodo.Description;
        todo.Done = resultTodo.Done;
        todo.IsEditing = false;
        Busy = false;
        return true;
    }
    else
    {
        todo.Description = description;
        todo.DescriptionEdit = description;
        todo.IsEditing = false;
        Busy = false;
        return false;
    }
}

private async Task ToggleDoneAsync(StatefulTodo todo)
{
    todo.Done = !todo.Done;
    var result = await SaveTodoAsync(todo);
    if (!result) { todo.Done = !todo.Done; }
}
}
